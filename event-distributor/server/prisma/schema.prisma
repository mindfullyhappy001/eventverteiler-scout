// Prisma schema for Event Distributor
// Postgres provider; supports arrays and JSONB

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id           String   @id @default(cuid())
  title        String?
  description  String?
  date         DateTime?
  time         String? // store HH:MM for simplicity
  location     Json?
  category     String?
  tags         String[] @db.Text
  price        Float?
  isVirtual    Boolean? @default(false)
  images       String[] @db.Text
  organizer    String?
  url          String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  versions     EventVersion[]
  publications EventPublication[]
}

model EventVersion {
  id        String   @id @default(cuid())
  eventId   String
  snapshot  Json
  createdAt DateTime @default(now())

  Event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model PlatformConfig {
  id        String   @id @default(cuid())
  platform  String   // meetup | eventbrite | facebook | ...
  method    String   // api | ui
  name      String?  // display name
  config    Json     // credentials and settings (encrypted externally)
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PublishJob {
  id          String   @id @default(cuid())
  eventId     String
  platform    String   // platform key
  method      String   // api | ui
  action      String   // create | update | delete
  scheduledAt DateTime
  status      String   @default("scheduled") // scheduled | running | success | failed
  tryCount    Int      @default(0)
  lastError   String?
  result      Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventPublication {
  id           String   @id @default(cuid())
  eventId      String
  platform     String
  method       String   // api | ui
  status       String   // created | in_progress | error | published | updated | deleted
  externalId   String?
  externalUrl  String?
  verifiedAt   DateTime?
  details      Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, platform, method])
}

model LogEntry {
  id        String   @id @default(cuid())
  scope     String   // server | platform:meetup:api | platform:facebook:ui | job:<id>
  level     String   // info | warn | error
  message   String
  meta      Json?
  createdAt DateTime @default(now())
}
